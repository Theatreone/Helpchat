import 'dotenv/config';
import express from 'express';
import morgan from 'morgan';
import cors from 'cors';
import jwt from 'jsonwebtoken';
import path from 'path';
import { fileURLToPath } from 'url';
import { CONFIGS } from './config.js';
import { retrieve } from './rag.js';

const app = express();
const PORT = Number(process.env.PORT || 5173);
const JWT_SECRET = process.env.JWT_SECRET || 'dev';
const JWT_TTL_SECONDS = Number(process.env.JWT_TTL_SECONDS || '300');

app.use(morgan('tiny'));
app.use(express.json({ limit: '1mb' }));
app.use(cors({ origin: true, credentials: true }));

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const PUBLIC = path.join(__dirname, '..', 'public');
app.use(express.static(PUBLIC));
app.use('/demo', express.static(path.join(__dirname, '..', 'demo')));

function getOriginFromReferer(referer?: string): string | null {
  try {
    if (!referer) return null;
    const u = new URL(referer);
    return `${u.protocol}//${u.host}`;
  } catch {
    return null;
  }
}

function isAllowedDomain(origin: string | null, siteKey: string): boolean {
  const cfg = CONFIGS[siteKey];
  if (!origin || !cfg) return false;
  return cfg.allowedDomains.includes(origin);
}

app.get('/config', (req, res) => {
  const siteKey = String(req.query.siteKey || '');
  const cfg = CONFIGS[siteKey];
  if (!cfg) return res.status(404).json({ error: 'unknown siteKey' });
  return res.json(cfg);
});

app.post('/token', (req, res) => {
  const { siteKey, origin } = req.body || {};
  const cfg = CONFIGS[siteKey];
  if (!cfg) return res.status(404).json({ error: 'unknown siteKey' });
  const refOrigin = getOriginFromReferer(req.get('referer'));
  if (!isAllowedDomain(origin || refOrigin, siteKey)) {
    return res.status(403).json({ error: 'origin_not_allowed' });
  }
  const exp = Math.floor(Date.now() / 1000) + JWT_TTL_SECONDS;
  const token = jwt.sign({ siteKey, origin: origin || refOrigin, exp }, JWT_SECRET, { algorithm: 'HS256' });
  res.json({ token, exp });
});

app.post('/answer', async (req, res) => {
  const { siteKey, origin, message } = req.body || {};
  if (!siteKey || !message) return res.status(400).json({ error: 'bad_request' });

  const refOrigin = getOriginFromReferer(req.get('referer'));
  if (!isAllowedDomain(refOrigin, siteKey)) return res.status(403).json({ error: 'origin_not_allowed' });

  const passages = await retrieve(message, siteKey, 3);

  const oos = /(weather|stock|football)/i.test(message);
  if (oos) {
    return res.json({
      answer: "I’m scoped to this website and can’t help with unrelated topics.",
      sources: [],
      usage: {},
      refusal: true
    });
  }

  const answer = passages.length
    ? passages.map(p => p.text).join(' ') + "\n\nSources:\n" + passages.map(p => `- [${p.title}](${p.url})`).join('\n')
    : "Thanks for reaching out.";

  res.json({ answer, sources: passages, usage: {} });
});

app.listen(PORT, () => {
  console.log(`HelpChat server running on http://localhost:${PORT}`);
});
